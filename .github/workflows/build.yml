name: Build & Release


on:
  push:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  build-version-number: 0.0.${{ github.run_number }}
  docker-image-name: ghcr.io/tonycknight/nomoretrolls:v0.0.${{ github.run_number }}
  

jobs:
  sca:
    name: Dotnet SCA
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"
        
      - name: dotnet SCA
        run: |
          dotnet tool restore
          dotnet restore
          dotnet list package --vulnerable --include-transitive | tee results.log

          FOUND_VULN=`grep -c 'has the following vulnerable packages' results.log` || true
          FOUND_CRIT=`grep -c 'Critical' results.log` || true
          FOUND_HIGH=`grep -c 'High' results.log` || true
          
          if [[ "$FOUND_VULN" != "0" ]]
          then
            if [ "$FOUND_CRIT" == "0" -a "$FOUND_HIGH" == "0"]
            then
              echo "### Vulnerable packages found ###"
              exit 0
            fi
            echo "### Critical/High vulnerable packages found ###"
            exit 1
          fi
          echo "## No problems found ##"
          exit 0


  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"
        
      - name: dotnet tool restore
        run: dotnet tool restore
              
      - name: Run build
        run: dotnet fake run "build.fsx" -t "All"

      - name: Archive Test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: tests.results
          path: |
            ./tests/**/TestResults/*
            
      - name: Archive Stryker results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: stryker.results
          path: |
            ./StrykerOutput/**

      - name: Archive Code coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: codecoverage
          path: ./publish/codecoverage/*.*

      - name: Unit test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: unit test results
          path: ${{ github.workspace }}/tests/nomoretrolls.tests/TestResults/test_results.trx
          reporter: dotnet-trx
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Code coverage results
        uses: 5monkeys/cobertura-action@master
        if: always()
        with:
          path: ${{ github.workspace }}/tests/nomoretrolls.tests/TestResults/coverage.info
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 0
          fail_below_threshold: true
          show_line: true
          show_branch: true
          show_missing: true
          show_class_names: true
          link_missing_lines: true
          report_name: code coverage results

  codeql:
    uses: ./.github/workflows/codeql-analysis.yml
    
  build-release-docker-image:
    name: Build & Release Docker image
    runs-on: ubuntu-latest
    needs:   [ build, sca, codeql ]

    steps:
      - uses: actions/checkout@v3

      - name: Set Preview Docker image name
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "docker-image-name=${{ env.docker-image-name }}-preview" >> $GITHUB_ENV

      - name: Build docker image
        run: docker build -t ${{ env.docker-image-name }} --build-arg BuildVersion=${{ env.build-version-number }} .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR }}

      - name: Push docker image
        if: ${{ github.event_name != 'pull_request' }}
        run: docker push ${{ env.docker-image-name }}

  create-gh-release:
    name: Create GH release
    runs-on: ubuntu-latest
    needs: [ build-release-docker-image, codeql ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:    
      - uses: actions/checkout@v3

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.build-version-number }}
          generateReleaseNotes: true

          
